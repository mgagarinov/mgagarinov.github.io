"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}!function(){var a="\n\t\tvarying vec2 vUv;\n\t\t\n\t\tvoid main(void) {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4(position, 1.0);\n\t\t}\n\t\t",c="\n\t\tuniform sampler2D velocity;\n\t\t\n\t\tvarying vec2 vUv;\n\t\t\n\t\tvoid main(void) {\n\t\t\tgl_FragColor = texture2D(velocity, vUv);\n\t\t}\n\t\t",s="\n\t\tuniform sampler2D velocity;\n\t\tuniform sampler2D acceleration;\n\t\tuniform float time;\n\t\t\n\t\tvarying vec2 vUv;\n\t\t\n\t\tvec3 polar(float radian1, float radian2, float radius) {\n\t\t\treturn vec3(\n\t\t\t\tcos(radian1) * cos(radian2) * radius,\n\t\t\t\tsin(radian1) * radius,\n\t\t\t\tcos(radian1) * sin(radian2) * radius\n\t\t\t);\n\t\t}\n\t\t\n\t\tvoid main(void) {\n\t\t\tvec3 v = texture2D(acceleration, vUv).xyz + texture2D(velocity, vUv).xyz;\n\t\t\tfloat vStep = step(1000.0, length(v));\n\t\t\tgl_FragColor = vec4(\n\t\t\t\tv * (1.0 - vStep) + normalize(v + polar(time, -time, 1.0)) * 80.0 * vStep,\n\t\t\t\t1.0\n\t\t\t);\n\t\t}\n\t\t",v='\n\t\tuniform vec2 resolution;\n\t\tuniform sampler2D velocity;\n\t\tuniform sampler2D acceleration;\n\t\tuniform float time;\n\t\tuniform vec2 vTouchMove;\n\t\t\n\t\tvarying vec2 vUv;\n\t\t\n\t\t//\n\t\t// GLSL textureless classic 3D noise "cnoise",\n\t\t// with an RSL-style periodic variant "pnoise".\n\t\t// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n\t\t// Version: 2011-10-11\n\t\t//\n\t\t// Many thanks to Ian McEwan of Ashima Arts for the\n\t\t// ideas for permutation and gradient selection.\n\t\t//\n\t\t// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n\t\t// Distributed under the MIT license. See LICENSE file.\n\t\t// https://github.com/ashima/webgl-noise\n\t\t//\n\t\t\n\t\tvec3 mod289(vec3 x)\n\t\t{\n\t\t\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec4 mod289(vec4 x)\n\t\t{\n\t\t\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec4 permute(vec4 x)\n\t\t{\n\t\t\treturn mod289(((x*34.0)+1.0)*x);\n\t\t}\n\t\t\n\t\tvec4 taylorInvSqrt(vec4 r)\n\t\t{\n\t\t\treturn 1.79284291400159 - 0.85373472095314 * r;\n\t\t}\n\t\t\n\t\tvec3 fade(vec3 t) {\n\t\t\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\n\t\t}\n\t\t\n\t\t// Classic Perlin noise\n\t\tfloat cnoise(vec3 P)\n\t\t{\n\t\t\tvec3 Pi0 = floor(P); // Integer part for indexing\n\t\t\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\t\t\tPi0 = mod289(Pi0);\n\t\t\tPi1 = mod289(Pi1);\n\t\t\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\t\t\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\t\t\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\t\t\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\t\t\tvec4 iz0 = Pi0.zzzz;\n\t\t\tvec4 iz1 = Pi1.zzzz;\n\t\t\n\t\t\tvec4 ixy = permute(permute(ix) + iy);\n\t\t\tvec4 ixy0 = permute(ixy + iz0);\n\t\t\tvec4 ixy1 = permute(ixy + iz1);\n\t\t\n\t\t\tvec4 gx0 = ixy0 * (1.0 / 7.0);\n\t\t\tvec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n\t\t\tgx0 = fract(gx0);\n\t\t\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\t\t\tvec4 sz0 = step(gz0, vec4(0.0));\n\t\t\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\t\t\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\t\t\n\t\t\tvec4 gx1 = ixy1 * (1.0 / 7.0);\n\t\t\tvec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n\t\t\tgx1 = fract(gx1);\n\t\t\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\t\t\tvec4 sz1 = step(gz1, vec4(0.0));\n\t\t\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\t\t\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\t\t\n\t\t\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n\t\t\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n\t\t\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n\t\t\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n\t\t\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n\t\t\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n\t\t\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n\t\t\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\t\t\n\t\t\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\t\t\tg000 *= norm0.x;\n\t\t\tg010 *= norm0.y;\n\t\t\tg100 *= norm0.z;\n\t\t\tg110 *= norm0.w;\n\t\t\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\t\t\tg001 *= norm1.x;\n\t\t\tg011 *= norm1.y;\n\t\t\tg101 *= norm1.z;\n\t\t\tg111 *= norm1.w;\n\t\t\n\t\t\tfloat n000 = dot(g000, Pf0);\n\t\t\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\t\t\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\t\t\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\t\t\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\t\t\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\t\t\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\t\t\tfloat n111 = dot(g111, Pf1);\n\t\t\n\t\t\tvec3 fade_xyz = fade(Pf0);\n\t\t\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\t\t\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\t\t\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\t\t\treturn 2.2 * n_xyz;\n\t\t}\n\t\t\n\t\t#define PRECISION 0.000001\n\t\tvec3 drag(vec3 a, float value) {\n\t\t\treturn normalize(a * -1.0 + PRECISION) * length(a) * value;\n\t\t}\n\t\t\n\t\tvoid main(void) {\n\t\t\tvec3 v = texture2D(velocity, vUv).xyz;\n\t\t\tvec3 a = texture2D(acceleration, vUv).xyz;\n\t\t\tvec3 d = drag(a, 0.02);\n\t\t\tfloat fx = cnoise(vec3(time * 0.1, v.y / 500.0, v.z / 500.0));\n\t\t\tfloat fy = cnoise(vec3(v.x / 500.0, time * 0.1, v.z / 500.0));\n\t\t\tfloat fz = cnoise(vec3(v.x / 500.0, v.y / 500.0, time * 0.1));\n\t\t\tvec3 f1 = vec3(fx, fy, fz) * 0.12;\n\t\t\tvec3 f2 = vec3(vTouchMove * 10.0, 0.0);\n\t\t\tgl_FragColor = vec4(a + f1 + f2 + d, 1.0);\n\t\t}\n\t\t',l="\n\t\tattribute vec3 position;\n\t\tattribute vec2 uvVelocity;\n\t\t\n\t\tuniform mat4 modelViewMatrix;\n\t\tuniform mat4 projectionMatrix;\n\t\tuniform float time;\n\t\tuniform sampler2D acceleration;\n\t\tuniform sampler2D velocity;\n\t\t\n\t\tvarying vec3 vAcceleration;\n\t\t\n\t\tvoid main() {\n\t\t\tvec3 a = texture2D(acceleration, uvVelocity).xyz;\n\t\t\tvec3 v = texture2D(velocity, uvVelocity).xyz;\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4(v, 1.0);\n\t\t\tvAcceleration = a;\n\t\t\tgl_PointSize = 1.0 * (1200.0 / length(mvPosition.xyz));\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t}\n\t\t",h="\n\t\tprecision highp float;\n\t\t\n\t\tuniform float time;\n\t\t\n\t\tvarying vec3 vAcceleration;\n\t\t\n\t\tvec3 convertHsvToRgb(vec3 c) {\n\t\t\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\t\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\t\t\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n\t\t}\n\t\t\n\t\tvoid main() {\n\t\t\tfloat start = smoothstep(time, 0.0, 1.0);\n\t\t\tvec3 n;\n\t\t\tn.xy = gl_PointCoord * 2.0 - 1.0;\n\t\t\tn.z = 1.0 - dot(n.xy, n.xy);\n\t\t\tif (n.z < 0.0) discard;\n\t\t\tfloat aLength = length(vAcceleration);\n\t\t\tvec3 color = convertHsvToRgb(vec3(aLength * 0.08 + time * 0.05, 0.5, 0.4));\n\t\t\tgl_FragColor = vec4(color, 0.4 * start);\n\t\t}\n\t\t",u=function(){function r(t,e,n,i){_classCallCheck(this,r),this.length=0,this.aScene=new THREE.Scene,this.vScene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(45,1,1,1e3),this.option={type:THREE.FloatType,minFilter:THREE.LinearFilter,magFilter:THREE.NearestFilter},this.acceleration=[new THREE.WebGLRenderTarget(length,length,this.option),new THREE.WebGLRenderTarget(length,length,this.option)],this.velocity=[new THREE.WebGLRenderTarget(length,length,this.option),new THREE.WebGLRenderTarget(length,length,this.option)],this.aUniforms={resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},velocity:{type:"t",value:null},acceleration:{type:"t",value:null},time:{type:"f",value:0}},this.vUniforms={resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)},velocity:{type:"t",value:null},acceleration:{type:"t",value:null},time:{type:"f",value:0}},this.accelerationMesh=this.createMesh(this.aUniforms,t,e),this.velocityMesh=this.createMesh(this.vUniforms,n,i),this.uvs=[],this.targetIndex=0}return _createClass(r,[{key:"init",value:function(t,e){this.length=Math.ceil(Math.sqrt(e.length/3));for(var n=[],i=0;i<3*Math.pow(this.length,2);i+=3)null!=e[i]?(n[i+0]=e[i+0],n[i+1]=e[i+1],n[i+2]=e[i+2],this.uvs[i/3*2+0]=i/3%this.length/(this.length-1),this.uvs[i/3*2+1]=Math.floor(i/3/this.length)/(this.length-1)):(n[i+0]=0,n[i+1]=0,n[i+2]=0);var r=new THREE.DataTexture(new Float32Array(n),this.length,this.length,THREE.RGBFormat,THREE.FloatType);r.needsUpdate=!0;var o=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:{velocity:{type:"t",value:r}},vertexShader:a,fragmentShader:c}));for(i=0;i<2;i++)this.acceleration[i].setSize(this.length,this.length),this.velocity[i].setSize(this.length,this.length);this.vScene.add(this.camera),this.vScene.add(o),t.render(this.vScene,this.camera,this.velocity[0]),t.render(this.vScene,this.camera,this.velocity[1]),this.vScene.remove(o),this.vScene.add(this.velocityMesh),this.aScene.add(this.accelerationMesh)}},{key:"createMesh",value:function(t,e,n){return new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.ShaderMaterial({uniforms:t,vertexShader:e,fragmentShader:n}))}},{key:"render",value:function(t,e){var n=Math.abs(this.targetIndex-1),i=this.targetIndex;this.aUniforms.acceleration.value=this.acceleration[n].texture,this.aUniforms.velocity.value=this.velocity[i].texture,t.render(this.aScene,this.camera,this.acceleration[i]),this.vUniforms.acceleration.value=this.acceleration[i].texture,this.vUniforms.velocity.value=this.velocity[i].texture,t.render(this.vScene,this.camera,this.velocity[n]),this.targetIndex=n,this.aUniforms.time.value+=e,this.vUniforms.time.value+=e}},{key:"getBufferAttributeUv",value:function(){return new THREE.BufferAttribute(new Float32Array(this.uvs),2)}},{key:"getCurrentVelocity",value:function(){return this.velocity[Math.abs(this.targetIndex-1)].texture}},{key:"getCurrentAcceleration",value:function(){return this.acceleration[Math.abs(this.targetIndex-1)].texture}},{key:"mergeAUniforms",value:function(t){this.aUniforms=Object.assign(this.aUniforms,t)}},{key:"mergeVUniforms",value:function(t){this.vUniforms=Object.assign(this.vUniforms,t)}},{key:"resize",value:function(t){this.length=t,this.velocity[0].setSize(t,t),this.velocity[1].setSize(t,t),this.acceleration[0].setSize(t,t),this.acceleration[1].setSize(t,t)}}]),r}(),t=function(){function t(){_classCallCheck(this,t),this.uniforms={time:{type:"f",value:0},velocity:{type:"t",value:null},acceleration:{type:"t",value:null}},this.physicsRenderer=null,this.vectorTouchMove=new THREE.Vector2(0,0),this.vectorTouchMoveDiff=new THREE.Vector2(0,0),this.obj=null}return _createClass(t,[{key:"init",value:function(t){this.obj=this.createObj(t)}},{key:"createObj",value:function(t){for(var e=768<window.innerWidth?7:6,n=new THREE.OctahedronBufferGeometry(400,e),i=n.attributes.position.array,r=[],o=0;o<i.length;o+=3)r[o+0]=i[o+0]+400*(2*Math.random()-1),r[o+1]=i[o+1]+400*(2*Math.random()-1),r[o+2]=i[o+2]+400*(2*Math.random()-1);return this.physicsRenderer=new u(a,v,a,s),this.physicsRenderer.init(t,r),this.physicsRenderer.mergeAUniforms({vTouchMove:{type:"v2",value:this.vectorTouchMoveDiff}}),this.uniforms.velocity.value=this.physicsRenderer.getCurrentVelocity(),this.uniforms.acceleration.value=this.physicsRenderer.getCurrentAcceleration(),n.addAttribute("uvVelocity",this.physicsRenderer.getBufferAttributeUv()),new THREE.Points(n,new THREE.RawShaderMaterial({uniforms:this.uniforms,vertexShader:l,fragmentShader:h,transparent:!0,depthWrite:!1,blending:THREE.AdditiveBlending}))}},{key:"render",value:function(t,e){this.physicsRenderer.render(t,e),this.uniforms.time.value+=e}},{key:"touchStart",value:function(t){this.vectorTouchMove.copy(t)}},{key:"touchMove",value:function(t){this.vectorTouchMoveDiff.set(t.x-this.vectorTouchMove.x,t.y-this.vectorTouchMove.y),this.vectorTouchMove.copy(t)}},{key:"touchEnd",value:function(){this.vectorTouchMove.set(0,0),this.vectorTouchMoveDiff.set(0,0)}}]),t}(),e=function(){function t(){_classCallCheck(this,t),this.message="particles effect created by yoichi kobayashi",this.url="http://www.tplh.net",this.show()}return _createClass(t,[{key:"show",value:function(){if(-1<navigator.userAgent.toLowerCase().indexOf("chrome")){var t=["\n%c ".concat(this.message," %c%c ").concat(this.url," \n\n"),"color: #fff; background: #222; padding:3px 0;","padding:3px 1px;","color: #fff; background: #47c; padding:3px 0;"];console.log.apply(console,t)}else window.console&&console.log("".concat(this.message," ").concat(this.url))}}]),t}(),n=document.getElementById("particles-canvas"),i=new THREE.WebGLRenderer({antialias:!1,canvas:n}),r=new THREE.Scene,o=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,1e4),f=new THREE.Clock,g=(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2,!1),d=(new e,new t);d.init(i);var y=function(){n.width=window.innerWidth,n.height=window.innerHeight,o.aspect=window.innerWidth/window.innerHeight,o.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)},m=function t(){var e;e=f.getDelta(),g||(d.render(i,e),i.render(r,o)),requestAnimationFrame(t)},x=function(){var e,n,i;window.addEventListener("resize",(e=function(){y()},function(t){clearTimeout(i),i=setTimeout(function(){e(t)},n)}),1e3);var t=null;window.addEventListener("scroll",function(){t||(t=setTimeout(function(){g=(window.pageYOffset||document.documentElement.scrollTop)>1.5*window.innerHeight,t=null},180))})},p=window.navigator.userAgent;/MSIE|Trident/.test(p)||(i.setSize(window.innerWidth,window.innerHeight),i.setClearColor(1118481,1),o.position.set(0,0,1e3),o.lookAt(new THREE.Vector3),r.add(d.obj),x(),y(),m())}();